{"version":3,"sources":["url.service.js","url.service.spec.js"],"names":["angular","module","concat","part","i","arguments","length","parts","push","encodeUriComponent","replace","str","pctEncodeSpaces","encodeUriSegment","this","describe","$url","_$url_","url","expect","it","toBe","not","undefined","window"],"mappings":"iBAKAA,eAMEC,OAAO,0BAKLC,OAAQ,wCAQJ,IADAC,KACIA,EAAAA,EAASC,EAAIC,UAAAC,OAAAF,IAAA,KACfG,EAAMC,UAAKL,yEASjBM,OAAAA,EAAAA,KAAoB,KAAAC,QAAA,iBAASC,OAAKC,QAAAA,QAAiB,uCAYnDC,OAAAA,mBAAkBF,GAAAD,QAAA,OAAc,KAAAA,QAAA,QAAA,KAAAA,QAAA,OAAA,KAAAA,QAAA,QAAA,KAAAA,QAAA,OAAAE,EAAA,MAAA,MC9CnCC,iBAAiBb,SAAoBW,GAAC,OAAAG,KAAAL,mBAAAE,GAAA,GAAAD,QAAA,QAAA,KAAAA,QAAA,QAAA,KAAAA,QAAA,QAAA,iDAKvCK,sBAMMC,MAAAA,wFAQJD,EAASE,cAMJ,gBAAA,eACDC,OAAMF,KACNG,kCAAiB,8BAEnBC,OAAGF,GAAAG,KAAA,aAEDF,oCAAiB,qCAEnBC,OAAGF,GAAAG,KAAA,iBAEDF,yCAAoB,WACpBA,EAAAA,EAAWD,OAAIZ,OAAS,OAAS,OAAA,gDAGjCY,2CAAyB,WACzBC,EAAAA,EAAWjB,OAAIoB,OAAS,SACxBH,OAAOD,EAAIA,IAAIZ,KAAAA,0CAGfY,4DAAyB,WACzBC,EAAAA,EAAOD,OAAU,MAAA,mCAEnBE,OAAGF,EAAAA,EAAAZ,OAAA,IAAAgB,IAA+BD,KAAA,UAEhCF,qCAAiB,mCAEnBC,OAAGF,GAAAG,KAAA,gBAEDF,8BAAiB,uCAEnBC,OAAGF,GAAAG,KAAA,kBAEDF,gCAAiB,2CAEnBC,OAAGF,GAAAG,KAAA,kBAEDF,2CAAiB,4CAEnBC,OAAGF,GAAAG,KAAA,wBAEDF,iDAAiB,WACjBD,EAAMF,EAAKd,OAAO,UAAO,IAAO,SAChCiB,OAAOD,GAAKG,KAAK,iBAEnBD,GAAG,oCAAA,WACDF,EAAMF,EAAKd,OAAO,MAAM,EAAA,OACxBiB,OAAOD,GAAKG,KAAK,2CAEnBD,OAAGF,GAAAG,KAAA,sBAEDF,+CAAiB,WACjBD,EAAMF,EAAKd,OAAO,EAAA,EAAA,GAClBiB,OAAOD,GAAKG,KAAK,cAEjBF,uCAAiB,WACjBD,EAAMF,EAAKd,OAAO,MAAO,GAAA,OACzBiB,OAAOD,GAAKG,KAAK,WACjBH,EAAMF,EAAKd,OAAO,OAAOqB,EAAAA,OACzBJ,OAAOD,GAAKG,KAAK,sCAEnBD,OAAGF,GAAAG,KAAA,WACDH,EAAMF,EAAKd,OAAO,MAAK,KAAA,OACvBiB,OAAOD,GAAKG,KAAK,0CAEnBD,OAAGF,GAAAG,KAAA,gBAEDF,gDAAiB,2DAKpBK,GAAAA,iDAhGH","file":"angular-url.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Url.Service', [])\n\n/**\n * Factory definition\n */\n.factory('$url', function() {\n  return {\n\n    /**\n     * Url concatenation helper\n     */\n    concat: function() {\n      var parts = [];\n      for (var i = 0; i < arguments.length; i++) {\n        var part = arguments[i];\n        if (part === null || part === undefined || part === true || part === false) {\n          continue;\n        }\n        part = String(part);\n        if (part !== '') {\n          parts.push(part);\n        }\n      }\n      return parts.join('/').replace(/([^:])(\\/\\/+)/g, '$1/').replace(/^\\/\\//, '/');\n    },\n\n    /**\n     * Encode URI component\n     */\n    encodeUriComponent: function(str, pctEncodeSpaces) {\n      return encodeURIComponent(str)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n    },\n\n    /**\n     * Encode URI segments\n     */\n    encodeUriSegment: function(str) {\n      return this.encodeUriComponent(str, true).\n        replace(/%26/gi, '&').\n        replace(/%3D/gi, '=').\n        replace(/%2B/gi, '+');\n    }\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Specifications\n */\ndescribe('Url', function() {\n\n  //Load module and service\n  beforeEach(module('Url.Service'));\n\n  //Inject url service\n  let $url;\n  beforeEach(inject(function(_$url_) {\n    $url = _$url_;\n  }));\n\n  /**\n   * Concatenation\n   */\n  describe('concatenation', function() {\n    let url;\n    it('should just return one URL part', function() {\n      url = $url.concat('/foo');\n      expect(url).toBe('/foo');\n    });\n    it('should concatenance two URL parts', function() {\n      url = $url.concat('/foo', '/bar');\n      expect(url).toBe('/foo/bar');\n    });\n    it('should concatenance multiple URL parts', function() {\n      url = $url.concat('/foo', '/bar', '/foo', '/bar');\n      expect(url).toBe('/foo/bar/foo/bar');\n    });\n    it('should keep leading and trailing slashes', function() {\n      url = $url.concat('/foo', '/bar/');\n      expect(url[0]).toBe('/');\n      expect(url[url.length - 1]).toBe('/');\n    });\n    it('should not add leading or trailing slashes when not given', function() {\n      url = $url.concat('foo', '/bar');\n      expect(url[0]).not.toBe('/');\n      expect(url[url.length - 1]).not.toBe('/');\n    });\n    it('should add slashes when none given', function() {\n      url = $url.concat('foo', 'bar');\n      expect(url).toBe('foo/bar');\n    });\n    it('should strip double slashes', function() {\n      url = $url.concat('/foo/', '/bar/');\n      expect(url).toBe('/foo/bar/');\n    });\n    it('should strip multiple slashes', function() {\n      url = $url.concat('/foo/', '/', '/bar/');\n      expect(url).toBe('/foo/bar/');\n    });\n    it('should keep double slashes for protocols', function() {\n      url = $url.concat('http://foo/', 'bar/');\n      expect(url).toBe('http://foo/bar/');\n    });\n    it('should strip redundant slashes after protocols', function() {\n      url = $url.concat('http://', '/', '/bar/');\n      expect(url).toBe('http://bar/');\n    });\n    it('should convert numbers to strings', function() {\n      url = $url.concat('foo', 1, 'bar');\n      expect(url).toBe('foo/1/bar');\n      url = $url.concat('foo', 1.234, 'bar');\n      expect(url).toBe('foo/1.234/bar');\n    });\n    it('should concatenate multiple numbers properly', function() {\n      url = $url.concat(1, 2, 3);\n      expect(url).toBe('1/2/3');\n    });\n    it('should ignore empty or invalid input', function() {\n      url = $url.concat('foo', '', 'bar');\n      expect(url).toBe('foo/bar');\n      url = $url.concat('foo', false, 'bar');\n      expect(url).toBe('foo/bar');\n      url = $url.concat('foo', true, 'bar');\n      expect(url).toBe('foo/bar');\n      url = $url.concat('foo', null, 'bar');\n      expect(url).toBe('foo/bar');\n      url = $url.concat('foo', undefined, 'bar');\n      expect(url).toBe('foo/bar');\n    });\n    it('should strip redundant single leading slashes', function() {\n      url = $url.concat('/', '/foo');\n      expect(url).toBe('/foo');\n    });\n    it('should strip redundant single trailing slashes', function() {\n      url = $url.concat('foo/', '/');\n      expect(url).toBe('foo/');\n    });\n  });\n});\n\n})(window, window.angular);\n"]}